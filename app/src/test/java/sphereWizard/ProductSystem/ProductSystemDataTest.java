/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sphereWizard.ProductSystem;

import org.junit.jupiter.api.Test;

import sphereWizard.Enums.OutputFlowTypes;
import sphereWizard.Enums.UnitEnums.Area;
import sphereWizard.Enums.UnitEnums.Distance;
import sphereWizard.Enums.UnitEnums.Energy;
import sphereWizard.Enums.UnitEnums.Mass;
import sphereWizard.Enums.UnitEnums.Volume;
import sphereWizard.Exceptions.FlowOutputNotRecognizedException;
import sphereWizard.Exceptions.UnitNotRecognizedException;
import sphereWizard.FlowProcessStructure.Flow;
import sphereWizard.FlowProcessStructure.InputFlow;
import sphereWizard.FlowProcessStructure.OutputFlow;
import sphereWizard.Util.Converter;
import sphereWizard.FlowProcessStructure.Process;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

/**
 * This class contains JUnit tests for the {@link ProductSystemData} class. The
 * tests cover various aspects
 * such as file import correctness, error handling, quantity measurements, unit
 * conversions, and unit assignments.
 */
class ProductSystemDataTest {
    /**
     * Test for correctly importing data from a CSV file with the expected format.
     */
    @Test
    public void test001_test001_ValidPathAndValidDelimiter() { //test001_testReadCSV became multiple tests for ECP table
        String rightPath = "src/test/java/sphereWizard/ProductSystem/test001FilePathImportCorrect.csv";
        String delimiter = ";";

        List<InputFlow> inputFlows = new ArrayList<>();
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Mass.KG));
        inputFlows.add(new InputFlow("agua", "Recurso de agua", 0.01, Volume.M3));

        List<OutputFlow> outputFlows = new ArrayList<>();
        outputFlows.add(new OutputFlow(OutputFlowTypes.VIRGIN_MATERIAL, "Circularidade", 1.06, Mass.KG));
        outputFlows.add(
                new OutputFlow(OutputFlowTypes.MAIN_MATERIALS_PRODUCTION_ENERGY, "Circularidade", 50000.0, Energy.J));

        List<Process> processes = new ArrayList<>();
        processes.add(new Process("Nome do Processo", "Categoria do Processo", inputFlows, outputFlows));

        ProductSystemData productSystemData = new ProductSystemData();

        try {
            productSystemData.readCsv(rightPath, delimiter);
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        } catch (UnitNotRecognizedException e) {
            throw new RuntimeException(e);
        } catch (FlowOutputNotRecognizedException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            e.printStackTrace();
        }

        assertEquals(productSystemData.getProcesses().toString(), processes.toString(),
                "Processes should match after CSV file import.");
    }

    /**
     * Test to ensure that attempting to import data from a non-existent file throws
     * a {@link FileNotFoundException}.
     */
    @Test
    public void test001_test002_InvalidPathValidDelimiter() {
        // Set up inputs
        String invalidPath = "nonexistent/path.csv";
        String delimiter = ";";

        // Invoke the method and assert the expected exception
        assertThrows(FileNotFoundException.class, () -> {
            new ProductSystemData().readCsv(invalidPath, delimiter);
        }, "FileNotFoundException expected for invalid path.");
    }
    @Test
    public void test001_test003_testValidPathAndInvalidDelimiter() {
        // Set up inputs
        String rightPath = "src/test/java/sphereWizard/ProductSystem/test001FilePathImportCorrect.csv";
        String invalidDelimiter = "";

        // Invoke the method and assert the expected exception
        assertThrows(NumberFormatException.class, () -> {
            new ProductSystemData().readCsv(rightPath, invalidDelimiter);
        }, "IOException expected for invalid delimiter.");
    }
    @Test
    public void test001_test004_testEmptyPath() {
        // Set up inputs
        String emptyPath = "";
        String delimiter = ";";

        // Invoke the method and assert the expected exception
        assertThrows(FileNotFoundException.class, () -> {
            new ProductSystemData().readCsv(emptyPath, delimiter);
        }, "FileNotFoundException expected for empty path.");
    }

    @Test
    public void test001_test005_testValidPathAndEmptyDelimiter() {
        // Set up inputs
        String rightPath = "src/test/java/sphereWizard/ProductSystem/test001FilePathImportCorrect.csv";
        String emptyDelimiter = "";

        // Invoke the method and assert the expected exception
        assertThrows(NumberFormatException.class, () -> {
            new ProductSystemData().readCsv(rightPath, emptyDelimiter);
        }, "IOException expected for empty delimiter.");
    }

    @Test
    public void test001_test006_testNullPath() {
        // Set up inputs
        String nullPath = null;
        String delimiter = ";";

        // Invoke the method and assert the expected exception
        assertThrows(NullPointerException.class, () -> {
            new ProductSystemData().readCsv(nullPath, delimiter);
        }, "FileNotFoundException expected for null path.");
    }

    @Test
    public void test001_test007_testValidPathAndNullDelimiter() {
        // Set up inputs
        String rightPath = "src/test/java/sphereWizard/ProductSystem/test001FilePathImportCorrect.csv";
        String nullDelimiter = null;

        // Invoke the method and assert the expected exception
        assertThrows(NullPointerException.class, () -> {
            new ProductSystemData().readCsv(rightPath, nullDelimiter);
        }, "IOException expected for null delimiter.");
    }

    /**
     * Test to ensure that quantities in the CSV file are never zero, throwing an
     * {@link IllegalArgumentException}.
     */
    @Test
    public void test002_MeasurementsShouldNeverBeZero() {
        ProductSystemData productSystemData = new ProductSystemData();
        String filePath = "src/test/java/sphereWizard/ProductSystem/test004MeasurementsShouldNeverBeZero.csv";
        String delimiter = ";";

        assertThrows(IllegalArgumentException.class, () -> {
            productSystemData.readCsv(filePath, delimiter);
        }, "Quantities should never be 0.");
    }


    /**
     * Test to verify that unit conversions are performed correctly.
     */
    @Test
    public void test003_ConversionsShouldBeRight() {

        ArrayList<Flow> inputFlows = new ArrayList<>();
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 100.00, Mass.G));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 100.00, Volume.CM3));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 100.00, Distance.HM));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 100.00, Energy.MJ));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 100.00, Area.DM2));

        Converter conv = new Converter();

        for (Flow flow : inputFlows) {
            conv.convert(flow);
        }

        assertEquals(0.1, inputFlows.get(0).getValue());
        assertEquals(0.0001, inputFlows.get(1).getValue());
        assertEquals(10000, inputFlows.get(2).getValue());
        assertEquals(100000000, inputFlows.get(3).getValue());
        assertEquals(1, inputFlows.get(4).getValue());
    }

    @Test
    public void test003_test001_MassConversion() {
        ArrayList<Flow> inputFlows = new ArrayList<>();
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 100.00, Mass.G));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", -100.00, Mass.G));
        Converter conv = new Converter();
        conv.convert(inputFlows.get(0));
        conv.convert(inputFlows.get(1));

        assertEquals(0.1, inputFlows.get(0).getValue(), "Mass conversion should be correct.");
        assertEquals(-0.1, inputFlows.get(1).getValue(), "Mass conversion should be correct.");
    }
    @Test
    public void test003_test002_VolumeConversion() {
        ArrayList<Flow> inputFlows = new ArrayList<>();
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 100.00, Volume.CM3));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", -100.00, Volume.CM3));
        Converter conv = new Converter();
        conv.convert(inputFlows.get(0));
        conv.convert(inputFlows.get(1));

        assertEquals(0.0001, inputFlows.get(0).getValue(), "Volume conversion should be correct.");
        assertEquals(-0.0001, inputFlows.get(1).getValue(), "Volume conversion should be correct.");
    }
    @Test
    public void test003_test003_DistanceConversion() {
        ArrayList<Flow> inputFlows = new ArrayList<>();
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 100.00, Distance.HM));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", -100.00, Distance.HM));
        Converter conv = new Converter();
        conv.convert(inputFlows.get(0));
        conv.convert(inputFlows.get(1));

        assertEquals(10000, inputFlows.get(0).getValue(), "Distance conversion should be correct.");
        assertEquals(-10000, inputFlows.get(1).getValue(), "Distance conversion should be correct.");
    }
    @Test
    public void test003_test004_EnergyConversion() {
        ArrayList<Flow> inputFlows = new ArrayList<>();
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 100.00, Energy.MJ));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", -100.00, Energy.MJ));
        Converter conv = new Converter();
        conv.convert(inputFlows.get(0));
        conv.convert(inputFlows.get(1));

        assertEquals(100000000, inputFlows.get(0).getValue(), "Energy conversion should be correct.");
        assertEquals(-100000000, inputFlows.get(1).getValue(), "Energy conversion should be correct.");
    }
    @Test
    public void test003_test005_AreaConversion() {
        ArrayList<Flow> inputFlows = new ArrayList<>();
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 100.00, Area.DM2));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", -100.00, Area.DM2));
        Converter conv = new Converter();
        conv.convert(inputFlows.get(0));
        conv.convert(inputFlows.get(1));

        assertEquals(1, inputFlows.get(0).getValue(), "Area conversion should be correct.");
        assertEquals(-1, inputFlows.get(1).getValue(), "Area conversion should be correct.");
    }
    /**
     * Test to verify that unit assignments are correct for various flow types and
     * units.
     */
    @Test
    public void test004UnitAssignmentsMustBeCorrect() {
        //UnitAssigner assigner = new UnitAssigner();
        ArrayList<Flow> inputFlows = new ArrayList<>();

        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Mass.KG));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Mass.T));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Mass.G));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Mass.MG));

        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Area.CM2));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Area.M2));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Area.DM2));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Area.KM2));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Area.HM2));

        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Volume.M3));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Volume.L));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Volume.DM3));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Volume.CM3));

        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Distance.M));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Distance.CM));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Distance.HM));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Distance.DM));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Distance.DAM));

        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Energy.J));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Energy.MJ));
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Energy.KWH));

        assertEquals(Mass.KG, inputFlows.get(0).getUnit());
        assertEquals(Mass.T, inputFlows.get(1).getUnit());
        assertEquals(Mass.G, inputFlows.get(2).getUnit());
        assertEquals(Mass.MG, inputFlows.get(3).getUnit());
        assertEquals(Area.CM2, inputFlows.get(4).getUnit());
        assertEquals(Area.M2, inputFlows.get(5).getUnit());
        assertEquals(Area.DM2, inputFlows.get(6).getUnit());
        assertEquals(Area.KM2, inputFlows.get(7).getUnit());
        assertEquals(Area.HM2, inputFlows.get(8).getUnit());
        assertEquals(Volume.M3, inputFlows.get(9).getUnit());
        assertEquals(Volume.L, inputFlows.get(10).getUnit());
        assertEquals(Volume.DM3, inputFlows.get(11).getUnit());
        assertEquals(Volume.CM3, inputFlows.get(12).getUnit());
        assertEquals(Distance.M, inputFlows.get(13).getUnit());
        assertEquals(Distance.CM, inputFlows.get(14).getUnit());
        assertEquals(Distance.HM, inputFlows.get(15).getUnit());
        assertEquals(Distance.DM, inputFlows.get(16).getUnit());
        assertEquals(Distance.DAM, inputFlows.get(17).getUnit());
        assertEquals(Energy.J, inputFlows.get(18).getUnit());
        assertEquals(Energy.MJ, inputFlows.get(19).getUnit());
        assertEquals(Energy.KWH, inputFlows.get(20).getUnit());
    }
    @Test
    public void test004_test001_UnitAssignmentMass() {
        ArrayList<Flow> inputFlows = new ArrayList<>();
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Mass.KG));
        assertEquals(Mass.KG, inputFlows.get(0).getUnit());
    }

    @Test
    public void test004_test002_UnitAssignmentArea() {
        ArrayList<Flow> inputFlows = new ArrayList<>();
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Area.CM2));
        assertEquals(Area.CM2, inputFlows.get(0).getUnit());
    }

    @Test
    public void test004_test003_UnitAssignmentVolume() {
        ArrayList<Flow> inputFlows = new ArrayList<>();
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Volume.M3));
        assertEquals(Volume.M3, inputFlows.get(0).getUnit());
    }

    @Test
    public void test004_test004_UnitAssignmentDistance() {
        ArrayList<Flow> inputFlows = new ArrayList<>();
        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Distance.M));
        assertEquals(Distance.M, inputFlows.get(0).getUnit());
    }
    @Test
    public void test004_test005_UnitAssignmentEnergy() {
        ArrayList<Flow> inputFlows = new ArrayList<>();

        inputFlows.add(new InputFlow("cascalho", "Recurso do solo", 1.06, Energy.J));
        assertEquals(Energy.J, inputFlows.get(0).getUnit());
    }

}
